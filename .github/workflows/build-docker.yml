name: Docker image build
on:
  workflow_call:
    inputs:
      cuda_compiler_version:
        type: string
        default: None
      name:
        type: string
        default: cpu
      options:
        type: string
        default: -DENABLE_CUDA=off

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Free space
        run: |
          sudo rm -rf /usr/local/lib/android/sdk /opt/hostedtoolcache /usr/share/swift /opt/az
          sudo apt-get purge -y gcc llvm-12 llvm-13 llvm-14

      - name: Set env context
        run: |
          echo RUN_STAMP=docker-${{ runner.os }}-${{ inputs.name }} >>$GITHUB_ENV
          cat omniscidb/docker/dev/Dockerfile omniscidb/docker/dev/Dockerfile.${{ inputs.name }} >Dockerfile

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          push: false
          load: true
          tags: build.${{ inputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      
        # https://github.com/docker/build-push-action/issues/252
      -  name: Move cache
         run: |
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Start the container
        run:  |
          mkdir -p build
          docker run -id --name build.${{ inputs.name }} --network host -v $(pwd):/_work build.${{ inputs.name }}:latest

      - name: Configure and build the project
        run: |
          docker exec -u ghrunner build.${{ inputs.name }} dpkg -l
          docker exec -u ghrunner build.${{ inputs.name }} sh /_work/omniscidb/scripts/conda/build.sh ${{ inputs.options }}
          docker exec -u ghrunner build.${{ inputs.name }} tar -zcf /tmp/build.tgz -C /_work .
          docker cp build.${{ inputs.name }}:/tmp/build.tgz .
     
      - name: Upload build and src files
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.RUN_STAMP }}-build
          path: build.tgz

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.RUN_STAMP }}-logs
          path: |
            omniscidb/build/*.log
            omniscidb/build/CMakeCache.txt 
            omniscidb/build/CMakeFiles/*.log

