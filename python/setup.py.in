#!/usr/bin/env python

#
# Copyright 2022 Intel Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from Cython.Build import cythonize
from distutils.core import setup, Extension

import os
import pyarrow as pa


def gen_include_dirs() -> list:
    return [
        pa.get_include(),
        "@CMAKE_CURRENT_SOURCE_DIR@",
        "@CMAKE_SOURCE_DIR@",
        *("@IDIRS@".split(";")),
    ]


# conda-forge packages hdk and pyhdk should be built separately.
# HDK_ROOT_PATH is defined by the hdk activate script that
# determines the location of HDK shared libraries required for
# pyhdk.
def get_hdk_shared_libs() -> list:
    if "HDK_ROOT_PATH" in os.environ:
        return [os.path.join(os.environ["HDK_ROOT_PATH"], "lib64")]
    return []


def gen_compile_flags() -> list:
    cpp_version_flags = ["-std=c++17"]
    if os.name == "nt":
        cpp_version_flags = [
            "/std:c++17",
            "/Zc:__cplusplus",
            "/w",
            "/DBOOST_USE_WINAPI_VERSION=0x0600",
        ]
    return [
        *(cpp_version_flags),
        *("-D@CDEFS@".replace(";", " -D").split()),
        "-D__STDC_FORMAT_MACROS",
        "-DBOOST_LOG_DYN_LINK",
    ]


def gen_rt_libs() -> list:
    if os.name != "nt":
        return [*(pa.get_library_dirs()), *(get_hdk_shared_libs())]
    return []


def gen_lib_dirs() -> list:
    return [
        *(pa.get_library_dirs()),
        "@CMAKE_CURRENT_BINARY_DIR@",
        ".",
        *(get_hdk_shared_libs()),
    ]


common = Extension(
    "pyhdk._common",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_common.pyx"],
    language="c++",
    include_dirs=gen_include_dirs(),
    library_dirs=gen_lib_dirs(),
    runtime_library_dirs=gen_rt_libs(),
    libraries=[
        *(pa.get_libraries()),
        "QueryEngine",
        "ConfigBuilder",
        "Logger",
        "Shared",
    ],
    extra_compile_args=gen_compile_flags(),
)

execute = Extension(
    "pyhdk._execute",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_execute.pyx"],
    language="c++",
    include_dirs=gen_include_dirs(),
    library_dirs=gen_lib_dirs(),
    runtime_library_dirs=gen_rt_libs(),
    libraries=[*(pa.get_libraries()), "QueryEngine", "ResultSet", "ResultSetRegistry"],
    extra_compile_args=gen_compile_flags(),
)

sql = Extension(
    "pyhdk._sql",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_sql.pyx"],
    language="c++",
    include_dirs=gen_include_dirs(),
    library_dirs=gen_lib_dirs(),
    libraries=["Calcite", "QueryEngine", "ResultSet", "ResultSetRegistry", "Logger"],
    extra_compile_args=gen_compile_flags(),
)

storage = Extension(
    "pyhdk._storage",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_storage.pyx"],
    language="c++",
    include_dirs=gen_include_dirs(),
    library_dirs=gen_lib_dirs(),
    runtime_library_dirs=gen_rt_libs(),
    libraries=[
        *(pa.get_libraries()),
        "ArrowStorage",
        "SchemaMgr",
        "DataMgr",
        "IR",
        "Logger",
    ],
    extra_compile_args=gen_compile_flags(),
)

ir = Extension(
    "pyhdk._ir",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_ir.pyx"],
    language="c++",
    include_dirs=gen_include_dirs(),
    library_dirs=gen_lib_dirs(),
    runtime_library_dirs=gen_rt_libs(),
    libraries=[*(pa.get_libraries()), "IR"],
    extra_compile_args=gen_compile_flags(),
)

builder = Extension(
    "pyhdk._builder",
    ["@CMAKE_CURRENT_SOURCE_DIR@/pyhdk/_builder.pyx"],
    language="c++",
    include_dirs=gen_include_dirs(),
    library_dirs=gen_lib_dirs(),
    runtime_library_dirs=gen_rt_libs(),
    libraries=[*(pa.get_libraries()), "QueryBuilder", "IR"],
    extra_compile_args=gen_compile_flags(),
)

setup(
    name="pyhdk",
    version="@HDK_VERSION_RAW@",
    packages=["pyhdk"],
    package_dir={"pyhdk": os.path.join("@NATIVE_CMAKE_CURRENT_SOURCE_DIR@", "pyhdk")},
    ext_modules=cythonize(
        [common, execute, sql, storage, ir, builder],
        compiler_directives={
            "c_string_type": "str",
            "c_string_encoding": "utf8",
            "language_level": "3",
        },
        include_path=["@CMAKE_CURRENT_SOURCE_DIR@"],
        gdb_debug=False,  # TODO: drive this via cmake build type
    ),
)
